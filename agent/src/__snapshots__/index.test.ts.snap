// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Agent > Chat > chat/submitMessage (long message) 1`] = `
"I'll help you create a simple Hello World function in Java. Here's a clean implementation:

\`\`\`java:src/HelloWorld.java
public class HelloWorld {
    public static void main(String[] args) {
        sayHello();
    }

    public static void sayHello() {
        System.out.println("Hello, World!");
    }
}
\`\`\`

To compile and run this Java program, use these commands:

\`\`\`bash
javac src/HelloWorld.java
\`\`\`

\`\`\`bash
java -cp src HelloWorld
\`\`\`

This code creates a function called \`sayHello()\` that prints "Hello, World!" to the console. The main method calls this function when the program runs. The code structure is clean, well-organized, and follows Java conventions."
`;

exports[`Agent > Chat > chat/submitMessage (short message) 1`] = `
{
  "model": "anthropic::2024-10-22::claude-3-5-sonnet-latest",
  "speaker": "assistant",
  "text": "Hi there! I'm excited to help you today! What can I assist you with?",
}
`;

exports[`Agent > Chat > chat/submitMessage (with mock context) 1`] = `
"\`\`\`typescript:src/dog.ts
export class Dog implements Animal {
    name: string;
    isMammal: boolean = true;

    constructor(name: string) {
        this.name = name;
    }

    makeAnimalSound(): string {
        return "Woof!";
    }
}
\`\`\`"
`;

exports[`Agent > Commands > commands/explain 1`] = `
"The Animal Interface (src/animal.ts)

This code defines a blueprint called \`Animal\` that acts as a template for creating different types of animals in the program. It's like a contract that says "any animal we create must have these specific characteristics and behaviors."

The interface specifies three required properties that any animal must have:
1. A \`name\` property that holds the animal's name as text (string)
2. A \`makeAnimalSound()\` method that, when called, will return a string representing the sound the animal makes (like "meow" or "woof")
3. An \`isMammal\` property that is either true or false (boolean), indicating whether the animal is a mammal or not

This interface doesn't contain any actual implementation - it's just a template. When someone wants to create a specific animal (like a cat or dog), they would need to create a new class that "implements" this Animal interface and provides actual values and code for all three of these requirements.

For example, if someone wanted to create a Cat class using this interface, they would need to:
- Give it a name property
- Write code for the makeAnimalSound() method that returns "meow"
- Set isMammal to true

The purpose of this interface is to ensure consistency across different types of animals in the program and make sure they all have the same basic structure. It's like creating a standardized form that all animals must fill out to be part of the system."
`;

exports[`Agent > Commands > commands/smell 1`] = `
"Here are 4 constructive suggestions to enhance the Animal interface:

1. Add JSDoc documentation above the interface to describe its purpose and requirements. This would improve code maintainability and help other developers understand how to properly implement the interface:

\`\`\`typescript:src/animal.ts
/**
 * Represents a generic animal with basic properties and behaviors
 */
export interface Animal {
\`\`\`

2. Consider adding readonly modifier to name property since it's likely an immutable characteristic. This provides better type safety and communicates intent:

\`\`\`typescript:src/animal.ts
export interface Animal {
    readonly name: string
\`\`\`

3. Add optional age property since it's a common animal attribute that implementing classes may want to track:

\`\`\`typescript:src/animal.ts
export interface Animal {
    name: string
    age?: number
\`\`\`

4. Consider splitting makeAnimalSound() into a separate behavior interface (ISoundMaker) to follow Interface Segregation Principle. This allows for more flexible composition of animal behaviors:

\`\`\`typescript:src/animal.ts
export interface ISoundMaker {
    makeAnimalSound(): string
}

export interface Animal extends ISoundMaker {
\`\`\`

Summary: While the current interface provides a good basic structure, there are opportunities to improve type safety, documentation, and modularity. The suggestions aim to make the code more maintainable and aligned with SOLID principles while maintaining its simplicity. The existing code follows sound design principles by keeping the interface focused and using clear naming conventions."
`;
