[
    {
        "prefix": "def calculate_area(shape):\n  if isinstance(shape, Circle):",
        "suffix": "\n  else:\n    raise ValueError(\"Unsupported shape\")",
        "ground_truth": "    return math.pi * shape.radius ** 2",
        "context": "import math\n\nclass Shape: pass\nclass Circle(Shape):\n  def __init__(self, r):\n    self.radius = r",
        "complexity": 6.5,
      },
      {
        "prefix": "async function fetchUser(id) {",
        "suffix": "}\n\nconst user = await fetchUser(123);",
        "ground_truth": "  const response = await fetch(`/api/users/${id}`);\n  return await response.json();",
        "context": "// Fetch API wrapper for user data\n",
        "complexity": 4.2,
      },
      {
        "prefix": "#include <iostream>\nint sum(int arr[], int size) {",
        "suffix": "}\n\nint main() {\n  int nums[] = {1, 2, 3};\n  std::cout << sum(nums, 3);\n}",
        "ground_truth": "  int total = 0;\n  for(int i = 0; i < size; i++) {\n    total += arr[i];\n  }\n  return total;",
        "context": "// C++ array processing function\n",
        "complexity": 3.2,
      },
      {
        "prefix": "program MaxFinder;\nfunction FindMax(a: array of integer): integer;\nvar\n  i, max: integer;\nbegin",
        "suffix": "  FindMax := max;\nend;",
        "ground_truth": "  if Length(a) = 0 then exit;\n  max := a[0];\n  for i := 1 to High(a) do\n    if a[i] > max then\n      max := a[i];",
        "context": "{ Pascal program to find maximum value }\n",
        "complexity": 4.7,
      },
      {
        "prefix": "int[] quickSort(int[] arr) {\n  if (arr.length <= 1) {",
        "suffix": "  }\n  return result;\n}",
        "ground_truth": "    return arr;\n  }\n  int pivot = arr[0];\n  int[] less = filter(arr, x -> x < pivot);\n  int[] greater = filter(arr, x -> x >= pivot && x != pivot);\n  int[] result = concat(quickSort(less), pivot, quickSort(greater))",
        "context": "import java.util.*;\n// Java sorting implementation\n",
        "complexity": 6.9,
      },
      {
        "prefix": "fn fetch_data() -> Result<Vec<String>, Error> {",
        "suffix": "}\n\nlet data = fetch_data().unwrap();",
        "ground_truth": "  let response = reqwest::blocking::get(\"https://api.example.com/data\")?;\n  let items = response.json()?;\n  Ok(items)",
        "context": "use reqwest;\nuse std::error::Error;\n// Rust HTTP client example\n",
        "complexity": 5.3,
      },
      {
        "prefix": "(defn fibonacci [n]\n  (if (<= n 1)",
        "suffix": "))\n\n(map fibonacci (range 10))",
        "ground_truth": "    n\n    (+ (fibonacci (- n 1)) (fibonacci (- n 2)))",
        "context": "; Clojure recursive function\n",
        "complexity": 4.5,
      },
      {
        "prefix": "procedure Merge(A: array; p, q, r: integer);\nvar\n  i, j, k: integer;\nbegin",
        "suffix": "end;",
        "ground_truth": "  n1 := q - p + 1;\n  n2 := r - q;\n  \n  // Create temp arrays\n  for i := 1 to n1 do\n    L[i] := A[p + i - 1];\n  for j := 1 to n2 do\n    R[j] := A[q + j];",
        "context": "{ Ada merge sort implementation }\n",
        "complexity": 7.8,
      },
      {
        "prefix": "validate_email <- function(email) {",
        "suffix": "}\n\nvalid <- validate_email(\"user@example.com\")",
        "ground_truth": "  pattern <- \"^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,}$\"\n  return(grepl(pattern, email))",
        "context": "# R email validation function\n",
        "complexity": 4.0,
      },
      {
        "prefix": "CREATE TABLE users (",
        "suffix": ");",
        "ground_truth": "  id SERIAL PRIMARY KEY,\n  name VARCHAR(100) NOT NULL,\n  email VARCHAR(100) UNIQUE,\n  created_at TIMESTAMP DEFAULT NOW()",
        "context": "-- SQL table definition\n",
        "complexity": 3.5,
      },
      {
        "prefix": "function memoize(fn: function): function {",
        "suffix": "}",
        "ground_truth": "  const cache = {};\n  return (...args) => {\n    const key = JSON.stringify(args);\n    if (key in cache) return cache[key];\n    const result = fn(...args);\n    cache[key] = result;\n    return result;\n  };",
        "context": "// TypeScript utility function\n",
        "complexity": 5.3,
      },
      {
        "prefix": "sub count_words {\n  my ($text) = @_;\n  if (!$text) {",
        "suffix": "  }\n  return %count;\n}",
        "ground_truth": "    return {};\n  }\n  my @words = split(/\\s+/, lc($text));\n  my %count;\n  foreach my $word (@words) {\n    $count{$word}++;",
        "context": "# Perl text processing function\n",
        "complexity": 4.8,
      },
      {
        "prefix": "package main\n\nfunc getUsersHandler(w http.ResponseWriter, r *http.Request) {",
        "suffix": "}",
        "ground_truth": "  users, err := db.FindAllUsers()\n  if err != nil {\n    http.Error(w, err.Error(), 500)\n    return\n  }\n  json.NewEncoder(w).Encode(users)",
        "context": "import (\n  \"net/http\"\n  \"encoding/json\"\n)\n",
        "complexity": 5.9,
      },
      {
        "prefix": "matrix_multiply <- function(A, B) {",
        "suffix": "}",
        "ground_truth": "  n <- nrow(A)\n  C <- matrix(0, nrow=n, ncol=n)\n  for (i in 1:n) {\n    for (j in 1:n) {\n      for (k in 1:n) {\n        C[i,j] <- C[i,j] + A[i,k] * B[k,j]\n      }\n    }\n  }\n  return(C)",
        "context": "# R matrix multiplication\n",
        "complexity": 7.5,
      },
      {
        "prefix": "throttle = (func, limit) ->",
        "suffix": "\n\nhandleResize = throttle(updateLayout, 100)",
        "ground_truth": "  inThrottle = false\n  return (args...) ->\n    unless inThrottle\n      func(args...)\n      inThrottle = true\n      setTimeout(-> inThrottle = false, limit)",
        "context": "# CoffeeScript utility function\n",
        "complexity": 6.2,
      },
      {
        "prefix": "mergeSort :: [Int] -> [Int]\nmergeSort xs",
        "suffix": "  where\n    merge :: [Int] -> [Int] -> [Int]\n    merge [] ys = ys\n    merge xs [] = xs\n    merge (x:xs) (y:ys) | x <= y = x : merge xs (y:ys)\n                         | otherwise = y : merge (x:xs) ys",
        "ground_truth": " | length xs <= 1 = xs\n | otherwise = merge (mergeSort left) (mergeSort right)\n   where (left, right) = splitAt (length xs `div` 2) xs",
        "context": "-- Haskell recursive sorting\n",
        "complexity": 6.8
      },
      {
        "prefix": "static int gcd(int a, int b) {",
        "suffix": "}",
        "ground_truth": "  while (b != 0) {\n    int temp = b;\n    b = a % b;\n    a = temp;\n  }\n  return a;",
        "context": "// C# math utility\n",
        "complexity": 3.6
      },
      {
        "prefix": "proc insertionSort {arr} {",
        "suffix": "}",
        "ground_truth": "  set len [llength $arr]\n  for {set i 1} {$i < $len} {incr i} {\n    set key [lindex $arr $i]\n    set j [expr {$i - 1}]\n    while {$j >= 0 && [lindex $arr $j] > $key} {\n      lset arr [expr {$j + 1}] [lindex $arr $j]\n      incr j -1\n    }\n    lset arr [expr {$j + 1}] $key\n  }\n  return $arr",
        "context": "# Tcl sorting algorithm\n",
        "complexity": 5.0
      },
      {
        "prefix": "module LongestSubstring\n  def self.find(s)",
        "suffix": "  end\nend",
        "ground_truth": "    start = max_length = 0\n    used_chars = {}\n    \n    s.chars.each_with_index do |char, i|\n      if used_chars[char] && start <= used_chars[char]\n        start = used_chars[char] + 1\n      else\n        max_length = [max_length, i - start + 1].max\n      end\n      used_chars[char] = i\n    end\n    max_length",
        "context": "# Ruby string algorithm\n",
        "complexity": 7.4
      },
]
